(ns repl.components
  (:require [clojure.edn :as edn]
            [clojure.string :as string]
            [me.raynes.fs :as fs]))

(def components-dir
  "src/cljs/components")

(defn file-name->ns-name
  [name]
  (string/replace name #"_" "-"))

(defn- component-exists?
  [name]
  (fs/exists? (str components-dir "/" name)))

(defn- get-component-template
  []
  (slurp "src/clj/repl/component-template.edn"))

(defn- render-component-template
  [template name]
  (string/replace template #"name" name))

(defn- create-component-impl
  [rendered name]
  (let [impl-dir (str components-dir "/" name)]
    (fs/mkdirs impl-dir)
    (spit (str impl-dir "/core.cljs") (str rendered))))

(defn- create-styles
  [name]
  (let [impl-dir (str components-dir "/" name)]
    (spit (str impl-dir "/styles.scss") "")))

(defn- get-component-names
  []
  (->> (fs/list-dir components-dir)
       (map #(.getName %))
       (filter #(not= % "core.cljs"))
       (map file-name->ns-name)))

(defn- components-core-ns-form
  [names]
  `(ns components.core
    (:require ~@(map (fn [name]
                       [(symbol (str "components." name ".core"))])
                     names))))

(defn- components-core-defs
  [names]
  `(do
     ~@(map (fn [name]
              `(def ~(symbol name)
                 ~(symbol (str "components." name ".core/" name))))
            names)))

(defn- components-core-content
  [names]
  (str (components-core-ns-form names)
       "\n"
       (components-core-defs names)
       "\n"
       ";;; This file is autogenerated by repl.components/create-component!\n"
       ";;; Do not modify manually"))

(defn- create-components-core!
  []
  (let [names (get-component-names)
        components-core-path (str components-dir "/core.cljs")]
    (spit components-core-path (components-core-content names))))

(defn create-component!
  [name]
  (assert (not (component-exists? name)))
  (let [ns-name (file-name->ns-name name)]
    (-> (get-component-template)
        (render-component-template ns-name)
        (create-component-impl name))
    (create-styles name)))